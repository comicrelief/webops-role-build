---

- name: Add python apt packages
  become: true
  apt:
    name: "{{item}}"
    update-cache: yes
    cache_valid_time: 86400
  with_items:
    - python-pip
    - python-dev
    - libffi-dev
    - libssl-dev

- name: Install python packages to allow us to validate apt repo keys from SNI-hosted urls
  become: true
  pip:
    name: "{{item}}"
    state: present
  with_items:
    - urllib3
    - pyopenssl
    - ndg-httpsclient
    - pyasn1

- name: Add apt repo keys
  become: true
  apt_key:
    url: "{{item}}"
    state: present
  with_items: "{{ apt_repo_keys | default([]) }}"

- name: Add apt repos
  apt_repository:
    repo: "{{item}}"
    update-cache: no # do this in a separate step below rather than once for each repo
  with_items: "{{ apt_repos |default([]) }}"
  register: update_apt

- name: Update apt cache if necessary
  become: true
  apt:
    update-cache: yes
  when: update_apt is defined and update_apt.changed == True

- name: Install apt packages
  become: true
  apt:
    name: "{{ item }}"
    state: latest
    update-cache: yes
    cache_valid_time: 86400
  with_items: "{{ apt_packages |default([]) }}"

- name: Install pip
  easy_install:
    name: pip
    state: latest # keep this up to date
  when: pip_packages is defined

# Task to install composer
- name: download composer
  get_url:
    url: https://getcomposer.org/installer
    dest: /tmp/composer
  when: composer_packages is defined

- name: install composer
  shell: cat /tmp/composer | php -- --install-dir=/usr/local/bin
  args:
    creates: /usr/local/bin/composer.phar
  when: composer is defined and composer == true

- name: rename composer.phar to composer
  shell: mv /usr/local/bin/composer.phar /usr/local/bin/composer
  args:
    creates: /usr/local/bin/composer
  when: composer is defined and composer == true

- name: make composer executable
  file:
    path: /usr/local/bin/composer
    mode: a+x
    state: file
  when: composer is defined and composer == true

- name: install bundler gem with proper $PATH
  gem:
    name: bundler
    state: latest
    user_install: no
  when: bundler is defined and bundler == true

# Task to install npm
- name: install packages globally using npm
  npm:
    name: "{{item}}"
    state: latest
    global: latest
  with_items: "{{ npm_system_packages |default([]) }}"

- name: install Python modules globally with pip
  pip:
    name: "{{item}}"
  with_items: "{{ pip_packages |default([]) }}"
