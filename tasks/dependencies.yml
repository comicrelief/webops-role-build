---

- name: Add initial dependencies needed to add apt repos and keys
  become: true
  apt:
    name: "{{item}}"
    update-cache: yes
    cache_valid_time: 86400
  with_items:
    - python-pip
    - python-dev
    - libffi-dev
    - libssl-dev
    - software-properties-common
    - python-software-properties
    - apt-transport-https

- name: Install python packages to allow us to validate apt repo keys from SNI-hosted urls
  become: true
  pip:
    name: "{{item}}"
    state: present
  with_items:
    - urllib3
    - pyopenssl
    - ndg-httpsclient
    - pyasn1

- name: Add apt repo keys
  become: true
  apt_key:
    url: "{{item}}"
    state: present
  with_items: "{{ apt_repo_keys | default([]) }}"

- name: Add apt repos (Ubuntu)
  become: true
  apt_repository:
    repo: "{{item}}"
    update-cache: no # do this in a separate step below rather than once for each repo
  with_items: "{{ apt_repos |default([]) }}"
  register: update_apt
  when: ansible_distribution == 'Ubuntu'

- name: Add apt repos (Debian)
  become: true
  apt_repository:
    repo: "{{item}}"
    update-cache: no # do this in a separate step below rather than once for each repo
    codename: xenial # use Xenial repos if Debian-specific ones aren't avaiable - needs Ansible 2.3
  with_items: "{{ apt_repos |default([]) }}"
  register: update_apt
  when: ansible_distribution == 'Debian'

- name: Update apt cache if necessary
  become: true
  apt:
    update-cache: yes
  when: update_apt is defined and update_apt.changed == True

- name: Install apt packages
  become: true
  apt:
    name: "{{ item }}"
    state: latest
    default_release: "{{ansible_distribution_release}}" # Prefer the release's version
    update-cache: yes
    cache_valid_time: 86400
  with_items: "{{ apt_packages |default([]) }}"

- name: Update npm
  become: true
  npm:
    name: npm
    global: true
    state: latest

- name: Download composer
  become: true
  get_url:
    url: https://getcomposer.org/installer
    dest: /tmp/composer

- name: Install composer
  become: true
  shell: cat /tmp/composer | php -- --install-dir=/usr/local/bin
  args:
    creates: /usr/local/bin/composer.phar

- name: Rename composer.phar to composer
  become: true
  shell: mv /usr/local/bin/composer.phar /usr/local/bin/composer
  args:
    creates: /usr/local/bin/composer

- name: Make composer executable
  become: true
  file:
    path: /usr/local/bin/composer
    mode: a+x
    state: file

- name: Check if /usr/bin/ruby and /usr/bin/gem exist
  stat:
    path: "/usr/bin/{{item}}"
  with_items:
    - ruby
    - gem 
  register: rs

- name: Find the highest installed ruby and gem versions
  shell: "ls -tr /usr/bin/ | grep -e '^{{item}}' | grep -Eo '[0-9.]{1,7}' |sort -n |tail -1"
  register: rv
  with_items:
    - ruby
    - gem

# This horrendous thing avoids the need to have a separate set tasks for each of ruby and gem
- name: Create /usr/bin/ruby and /usr/bin/gem links if needed
  become: true
  file:
    src: "{{item.0.invocation.module_args.path}}{{item.1.stdout}}"
    dest: "{{item.0.invocation.module_args.path}}"
    state: link
  with_together:
    - "{{rs.results}}"
    - "{{rv.results}}"
  when: item.0.stat.exists == False

- name: Install bundler gem with proper $PATH
  become: true
  gem:
    name: bundler
    state: latest
    user_install: no

- name: Install packages globally using npm
  become: true
  npm:
    name: "{{item}}"
    state: latest
    global: true
  with_items: "{{ npm_packages |default([]) }}"

- name: Install Python modules globally with pip
  become: true
  pip:
    name: "{{item}}"
  with_items: "{{ pip_packages |default([]) }}"

- name: Install user-wide Composer packages
  command: "composer require {{item}}"
  with_items: "{{ composer_packages |default([]) }}"

- name: Add user-wide Composer packages to the system path
  become: true
  lineinfile:
    dest: /etc/environment
    state: present
    regexp: '^PATH='
    line: "PATH={{ansible_env.PATH}}:{{ansible_user_dir}}/vendor/bin"

- name: Add global Composer packages to Ansible's path
  setup:
    filter: ansible_env*

